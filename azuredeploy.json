{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Admin username for VM"
      }
    },
    "sshKeyData": {
      "type": "string",
      "metadata": {
        "description": "SSH rsa public key file as a string."
      }
    },
    "vmSize": {
      "defaultValue": "Standard_D1_v2",
      "metadata": {
        "description": "Size of the Virtual Machine."
      },
      "type": "string",
      "allowedValues": [
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2"
      ]
    },
    "appPrefix": {
      "type": "string",
      "metadata": {
        "description": "Prefix for each component (VMs, networks, etc)"
      },
      "maxLength": 11
    },
    "existingAtlasToken": {
      "type": "string",
      "metadata": {
        "description": "Your existing access token from Atlas"
      }
    },
    "existingAtlasInfraName": {
      "type": "string",
      "metadata": {
        "description": "The name of your existing infrastructure in Atlas (username/infraName)"
      }
    },
    "dcName": {
      "type": "string",
      "metadata": {
        "description": "The name of the data centre"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "VNET Name"
      }
    },
    "virtualNetworkResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Resource Group VNET is deployed in"
      }
    },
    "subnet1Name": {
      "type": "string",
      "metadata": {
        "description": "Name of the subnet inside the VNET"
      }
    }
  },
  "variables": {
    "imagePublisher": "Canonical",
    "vnetID": "[resourceId(parameters('virtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks', variables('vnetIDRef'))]",
    "subnet1Name": "[parameters('subnet1Name')]",
    "customScriptFilePath": "https://raw.githubusercontent.com/Collabco/consul-on-ubuntu-existing-vnet/master/install-consul.sh",
    "vmStorageAccountContainerName": "vhds",
    "subnet1Ref": "[concat(variables('vnetID'),'/subnets/', variables('subnet1Name'))]",
    "numberOfInstances": 3,
    "apiVersion": "2015-06-15",
    "customScriptCommandToExecute": "bash install-consul.sh",
    "publicIPAddressType": "Dynamic",
    "imageSKU": "16.04.0-LTS",
    "vnetIDRef": "[parameters('virtualNetworkName')]",
    "imageOffer": "UbuntuServer",
    "storageAccountName": "[concat(uniquestring(resourceGroup().id), parameters('appPrefix'))]",
    "sshKeyPath": "[concat('/home/',parameters('adminUserName'),'/.ssh/authorized_keys')]"
  },
  "resources": [
    {
      "properties": {
        "accountType": "Standard_LRS"
      },
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('apiVersion')]",
      "name": "[variables('storageAccountName')]"
    },
    {
      "name": "[concat(parameters('appPrefix'),'-publicIP-', copyindex())]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "count": "[variables('numberOfInstances')]",
        "name": "ipLoop"
      },
      "type": "Microsoft.Network/publicIPAddresses",
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
      }
    },
    {
      "properties": { },
      "type": "Microsoft.Compute/availabilitySets",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('apiVersion')]",
      "name": "[concat(parameters('appPrefix'),'_AS')]"
    },
    {
      "properties": {
        "securityRules": [
          {
            "name": "ssh_rule",
            "properties": {
              "priority": 100,
              "direction": "Inbound",
              "protocol": "Tcp",
              "description": "Allow external SSH",
              "access": "Allow",
              "destinationPortRange": "22",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "sourceAddressPrefix": "Internet"
            }
          }
        ]
      },
      "type": "Microsoft.Network/networkSecurityGroups",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('apiVersion')]",
      "name": "[concat(parameters('appPrefix'),'_SG')]"
    },
    {
      "name": "[concat(parameters('appPrefix'),'_LB')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "type": "Microsoft.Network/loadBalancers",
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "loadBalancerFrontEnd",
            "properties": {
              "subnet": {
                "id": "[variables('subnet1Ref')]"
              }
            }
          }
        ],
        "loadBalancingRules": [
          {
            "name": "lbrule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat(parameters('appPrefix'),'_LB')), '/frontendIpConfigurations/loadBalancerFrontEnd')]"
              },
              "backendPort": 8500,
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat(parameters('appPrefix'),'_LB')), '/probes/lbprobe')]"
              },
              "protocol": "Tcp",
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat(parameters('appPrefix'),'_LB')), '/backendAddressPools/loadBalancerBackEnd')]"
              },
              "frontendPort": 8500,
              "idleTimeoutInMinutes": 15
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "loadBalancerBackEnd"
          }
        ],
        "probes": [
          {
            "name": "lbprobe",
            "properties": {
              "protocol": "Tcp",
              "numberOfProbes": 2,
              "intervalInSeconds": 15,
              "port": 8500
            }
          }
        ]
      }
    },
    {
      "name": "[concat(parameters('appPrefix'),'_nic1', copyindex())]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', parameters('appPrefix'),'-publicIP-', copyindex())]",
        "[concat('Microsoft.Network/loadBalancers/', parameters('appPrefix'),'_LB')]"
      ],
      "copy": {
        "count": "[variables('numberOfInstances')]",
        "name": "nicLoop"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "properties": {
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(parameters('appPrefix'),'_SG'))]"
        },
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "subnet": {
                "id": "[variables('subnet1Ref')]"
              },
              "privateIPAllocationMethod": "Dynamic",
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat(parameters('appPrefix'),'_LB')),'/backendAddressPools/loadBalancerBackEnd')]"
                }
              ],
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIpAddresses', concat(parameters('appPrefix'),'-publicIP-', copyindex()))]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[concat(parameters('appPrefix'), '_vm', copyIndex())]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', parameters('appPrefix'),'_nic1', copyIndex())]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "[concat('Microsoft.Compute/availabilitySets/', parameters('appPrefix'),'_AS')]"
      ],
      "copy": {
        "count": "[variables('numberOfInstances')]",
        "name": "virtualMachineLoop"
      },
      "type": "Microsoft.Compute/virtualMachines",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "adminUsername": "[parameters('adminUsername')]",
          "computerName": "[concat(parameters('appPrefix'), 'vm', copyIndex())]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshKeyData')]"
                }
              ]
            }
          }
        },
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', concat(parameters('appPrefix'),'_AS'))]"
        },
        "storageProfile": {
          "imageReference": {
            "sku": "[variables('imageSKU')]",
            "publisher": "[variables('imagePublisher')]",
            "version": "latest",
            "offer": "[variables('imageOffer')]"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "vhd": {
              "uri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/vhds/','osdisk', copyIndex(), '.vhd')]"
            },
            "createOption": "FromImage",
            "name": "osdisk"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('appPrefix'),'_nic1', copyindex()))]",
              "properties": {
                "primary": true
              }
            }
          ]
        }
      }
    },
    {
      "name": "[concat(parameters('appPrefix'), '_vm', copyIndex(), '/extension')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('appPrefix'), '_vm', copyIndex())]"
      ],
      "copy": {
        "count": "[variables('numberOfInstances')]",
        "name": "virtualMachineLoop"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[variables('customScriptFilePath')]"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[concat(variables('customScriptCommandToExecute'),' ', parameters('existingAtlasInfraName'), ' ', parameters('existingAtlasToken'))]"
        }
      }
    }
  ]
}
